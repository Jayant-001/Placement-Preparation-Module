class Solution {
public:
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        
        int n = grid.size(), m = grid[0].size();
        priority_queue< pair<int, pair<int, int>>, vector< pair<int, pair<int, int>> >, greater< pair<int, pair<int, int>> > > pq;
        vector<vector<int>> dis(n, vector<int>(m, INT_MAX));
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j]) {
                    pq.push({0, {i, j}});
                    dis[i][j] = 0;
                }
            }
        }
        
        vector<vector<int>> moves = {{0,1},{0,-1},{1,0},{-1,0}};
        while(pq.size()) {
            int d = pq.top().first;
            int i = pq.top().second.first, j = pq.top().second.second;
            pq.pop();
            
            for(auto move : moves) {
                int row = i+move[0], col = j + move[1];
                if(row >= 0 && row < n && col >= 0 && col < m && d+1 < dis[row][col]) {
                    dis[row][col] = d+1;
                    pq.push({d+1, {row, col}});
                }
            }
        }
        
        vector<vector<int>> vis(n, vector<int>(m, 0));
        priority_queue< pair<int, pair<int, int>>> todo;
        todo.push({dis[0][0], {0, 0}});
        vis[0][0] = 1;
        
        while(todo.size()) {
            int d = todo.top().first;
            int i = todo.top().second.first, j = todo.top().second.second;
            todo.pop();
            
            if(i == n-1 && j == m-1) return d;
            
            for(auto move : moves) {
                int row = i+move[0], col = j + move[1];
                if(row >= 0 && row < n && col >= 0 && col < m && vis[row][col] == 0) {
                    todo.push({min(d,dis[row][col]), {row, col}});
                    vis[row][col] = 1;
                }
            }
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cout << dis[i][j] << " ";
            }
            cout << endl;
        }
        
        return 0;
    }
};