class LRUCache {
public:
    struct Node {
        Node *left;
        Node *right;
        int value;
        Node(int val) {
            left = NULL;
            right = NULL;
            value = val;
        }
        Node() {
            value = -1;
            left = NULL;
            right = NULL;
        }
    };
    Node *head, *tail;
    unordered_map<int, Node*> m;
    unordered_map<int, int> mm;
    int k;
    LRUCache(int capacity) {
        head = new Node();
        tail = new Node();
        head->right = tail;
        tail->left = head;
        k = capacity;
    }
    
    void removeNode(Node *cur) {
        Node* left = cur->left;
        Node *right = cur->right;
        left->right = right;
        right->left = left;
    }
    void insertHead(Node *cur) {
        Node *next = head->right;
        head->right = cur;
        cur->left = head;
        cur->right = next;
        next->left = cur;
    }
    
    int get(int key) {
        
//         Node *cur = head;
//         while(cur != NULL) {
//             cout << cur->value << " ";
//             cur = cur->right;
//         }
//         for(auto i : m) cout << i.first << " ";
//         cout << endl;
        if(m.find(key) == m.end()) return -1;
        
        Node *node = m[key];
        removeNode(node);
        insertHead(node);
        
        return mm[node->value];
    }
    
    void put(int key, int value) {
        if(m.find(key) != m.end()) removeNode(m[key]);
        
        Node *cur = new Node(key);
        insertHead(cur);
        m[key] = cur;
        mm[key] = value;
        
        if(m.size() > k) {
            int val = tail->left->value;
            m.erase(val);
            removeNode(tail->left);
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */