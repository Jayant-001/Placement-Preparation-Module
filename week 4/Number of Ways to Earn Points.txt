class Solution {
public:
    int waysToReachTarget(int target, vector<vector<int>>& types) {
        
        int n = types.size(), w = target, mod = 1e9+7;
        vector<vector<int>> dp(n+1, vector<int>(w+1, 0));
        for(int i = 0; i <= n; i++) dp[i][0] = 1;
        
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= w; j++) {
                
                for(int k = 1; k <= types[i-1][0]; k++) {
                    int cur = k * types[i-1][1];
                    if(j >= cur)
                        dp[i][j] = (dp[i][j] + dp[i-1][j-cur]) % mod;
                }
                dp[i][j] = (dp[i][j] + dp[i-1][j]) % mod;
            }
        }
        return dp[n][w];
    }
};