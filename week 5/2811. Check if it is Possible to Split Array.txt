class Solution {
public:
    int dp[200][200];
    int solve(vector<int> &arr, int i, int j, int m) {
        if(i >= j) return true;
        if(dp[i][j] != -1) return dp[i][j];
        
        int sum = arr[j];
        if(i > 0) sum -= arr[i-1];
        
        // if(abs(i-j) == 1) return true;
        if(sum < m) return false;
        
        return dp[i][j] = solve(arr, i+1, j, m) | solve(arr, i, j-1, m);
    }
    bool canSplitArray(vector<int>& nums, int m) {
        
        int n = nums.size();
        if(n <= 2) return true;
        vector<int> pre = nums;
        for(int i = 1; i < n; i++) pre[i] += pre[i-1];
        
        memset(dp, -1, sizeof(dp));
        return solve(pre, 0, n-1, m);
//         int i = 0, j = n-1;
//         while(i < j) {
            
//             int sum = pre[j];
//             if(i > 0) sum -= pre[i-1];
            
//             if(sum < m) {
//                 cout << i << " " << j <<endl;
//                 return false;
//             } 
//             if(nums[i] <= nums[j]) i++;
//             else j--;
//         }
    
//         return true;
    }
};