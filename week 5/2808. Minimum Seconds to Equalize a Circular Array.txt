class Solution {
public:
    int getMaxi(vector<int> &arr, int n) {
        int ans = 0;
        if(arr.size() == 1) return -1;
    
        
        for(int i = 0; i < arr.size()-1; i++) {
            ans = max(ans, arr[i+1]-arr[i]-1);
        }
        ans = max(ans, (n-arr[arr.size()-1]) + (arr[0]-1));
        return ans;        
    }
    int minimumSeconds(vector<int>& nums) {
        
        unordered_map<int, vector<int>> index;
        int n = nums.size(), ans = INT_MAX;
        for(int i = 0; i < n; i++) {
            index[nums[i]].push_back(i+1);
        }
        
        for(auto i : index) {
            
            vector<int> temp = i.second;
            int maxi = getMaxi(temp, n);
            
            if(maxi == -1) maxi = n-1;
            
            // cout << i.first << " ";
            // for(auto val : temp) cout << val << " ";
            // cout << endl;
            int cur = maxi / 2;
            cur += maxi&1;
            ans = min(ans, cur);
            
        }
        
        
        return ans;
    }
};

// [8,8,9,10,9]
// [1,2,3,4,5]
// [1,2,1,2]
// [2,1,3,3,2]
// [5,5,5,5]
// [1,1,1,1,2,2,2,2]
// [2,3,2,3,4,4]
// [1,1,1,4,1,1,4]
// [6,17,16,14,7,10,15,16,2,10]